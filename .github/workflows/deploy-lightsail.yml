name: Deploy to Lightsail

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment based on branch
      id: set-env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "image_tag=latest" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "image_tag=dev-latest" >> $GITHUB_OUTPUT
        fi

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/shisha-log:${{ steps.set-env.outputs.image_tag }}
          ${{ secrets.DOCKER_USERNAME }}/shisha-log:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Lightsail
      run: |
        INSTANCE_NAME="shisha-log-${{ steps.set-env.outputs.environment }}"
        
        # Check if instance is running
        aws lightsail get-instance --instance-name $INSTANCE_NAME
        
        # Create deployment command
        DEPLOY_COMMAND="cd /opt/shisha-log && \
          echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin && \
          docker pull ${{ secrets.DOCKER_USERNAME }}/shisha-log:${{ steps.set-env.outputs.image_tag }} && \
          docker-compose up -d --force-recreate && \
          sleep 30 && \
          curl -f http://localhost:8080/health"
        
        # Execute deployment on Lightsail instance
        aws lightsail put-instance-public-ports \
          --instance-name $INSTANCE_NAME \
          --port-infos fromPort=22,toPort=22,protocol=tcp,cidrs=0.0.0.0/0 \
          --no-cli-pager
        
        # Note: This requires SSH key setup. Alternative approach below uses user data
        echo "Deployment command ready. Instance: $INSTANCE_NAME"
        echo "Manual deployment: SSH to instance and run the deployment script"

  deploy-terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment
      id: set-env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: infra
      run: terraform init

    - name: Terraform Plan
      working-directory: infra
      run: |
        terraform workspace select ${{ steps.set-env.outputs.environment }} || terraform workspace new ${{ steps.set-env.outputs.environment }}
        terraform plan -var-file=environments/${{ steps.set-env.outputs.environment }}/terraform.tfvars -no-color
      env:
        TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
        TF_VAR_supabase_service_role_key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
        TF_VAR_registry_username: ${{ secrets.DOCKER_USERNAME }}
        TF_VAR_registry_password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Terraform Apply
      working-directory: infra
      run: terraform apply -var-file=environments/${{ steps.set-env.outputs.environment }}/terraform.tfvars -auto-approve
      env:
        TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
        TF_VAR_supabase_service_role_key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
        TF_VAR_registry_username: ${{ secrets.DOCKER_USERNAME }}
        TF_VAR_registry_password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Output Static IP
      working-directory: infra
      run: terraform output static_ip_address